laravel特点
1. 单入口
2. 分层思想
3. ORM操作数据库
PS: 所有URL访问都必须事先定好路由规则

app目录: 存放项目
bootstarp目录: 启动
config目录: 配置
database目录： migration（创建数据表的类文件） seed(数据填充文件)
pubic目录：项目入口文件 静态资源文件 （项目单一入口文件，虚拟主机根目录）
resources：视图文件 语言包文件
routes目录：定义路由目录 web.php是定义路由的文件
storage目录：缓存文件、日志文件、后期用户上传文件
vendor目录： 第三方类库

.env文件 环境配置文件 （config配置一般都是读取.env文件）
artisan文件 代码生成文件

php artisan serve 启动与Apache无关（不推荐）
推荐使用虚拟主机

路由：(/routes)
  Route::请求方式('URL', 匿名函数/控制响应的方法);
       get/post/any

  Route::match([   ], 'URL', 匿名函数/控制响应的方法);
             请求方法数组

  路由参数的传递通过路由地址中的“{参数名}”传递（必选参数）
        {参数名?} 可选参数

  Route::any('/test4', function () {
    echo '<p>Test4-' . $_GET['id'] . '</p>';
  })->name('名字');//路由别名
  调用路由：route('名字');

  路由群组：
  Route::group(公共属性数组, 回调函数);

控制器：(/app/Http/Controllers) 实际上是类
    命名规则： nameController.php
    命令： php artisan make:controller 控制器名Controller 关键词
        ex:php artisan make:controller TestController
    命名空间三元素：常量 方法 类 （同一级目录不用引入）

    控制器路由：
    Route::get('/home/test/test1','TestController@test1');
                  URL                   控制器@方法
    
    分目录管理：
    php artisan make:controller Admin/IndexController
                                加上目录即可
    
接收用户输入：
    类接收： Illuminate\Support\Facades\Input (可在config/app.php中 在aliases数组配置别名)
    Input::get('参数名','参数没被传递时使用的默认值')
    Input::all()  获取所有用户输入
    Input::get('') 获取单个用户输入
    Input::only([])  获取指定用户输入
    Input::except([])  获取除指定用户输入外的所有用户输入
    Input::has('name') 判断输入参数是否存在

    Request也可接收输入

输出： dd(Array) //dump + die 后面代码不会执行

DB:
  use Illuminate\Support\Facades\DB;

  $db = DB::table('表名'); //连接表
  插入：
        $db->insert(一维/二维数组);

  更新：
  $db->where('id', '=', '3')->update([ '列名' => '值']);
  $db->increment('列名',5);  //每次+5
  $db->decrement('列名',5);  //每次-5

  查询：
  $db -> where() -> where() -> where()...  and关系

  $db -> where() -> orwhere() -> orwhere()...  or关系

  $db -> where()... ->get(); //取出所有

  $db -> where()... ->first(); //取出第一条

  $db -> where() ->value('列名'); //取出一个字段

  $db -> select('列名','列名') -> get(); //取出多个字段

  $db -> orderby('列名','asc/desc') -> get(); //排序

  $db -> limit(3) -> offset(2) -> get(); //分页
        输出条数    初始输出位置

  删除：
  $db -> where().. -> delete(); //返回影响行数

  使用SQL语句：
  影响记录的语句(insert update delete)
  DB::statement("SQL语句");

  不影响记录语句：
  DB::select("SQL语句");

视图：(resources\views)
  命名：后缀是 .blade.php

  展示视图：return view('名称');

  变量分配与展示： 
  view(模板, 数组); //数组传递变量给.blade.php
  .blade.php中 通过{{$键值}}访问

  compact('变量名1','变量名2'...) //将变量打包成数组

  视图中调用函数： {{ function($arg1,$arg2...) }}

  视图中循环体写法：
  @@foreach ($collection as $item)
    code...
  @endforeach

  if写法：
  @if()
    code
  @elseif()
    code
  @else()
    code
  @endif

  视图继承
  父： @yield('name') //占位符
  子： @extends('home.parent') //继承模板
       @section('name')  //绑定占位符
          bodycode
       @endsection

  也可以引入： @include('home.parent')

CSRF攻击：
    laravel默认全局开启csrf验证机制
    表单中应加上隐藏域：
    <input type="hidden" name="_token" value="{{csrf_token()}}">
    等价于 {{csrf_field()}}

    csrf白名单：app\Http\Middleware\VerifyCsrfToken.php
    将路由填进数组即可
    如果填进 '*' 则全局禁用csrf验证 

模型：app下
  命名： 表名.php (建议) Member.php

  创建模型： php artisan make:model Member

  注意事项：
  class Member extends Model
  {
    //定义关联的数据表 (必填)
    protected $table = 'member';
    //定义主键 (可选)
    protected $primaryKey = 'id';
    //定义禁止操作时间 (一般设置为false)
    public $timestamps = false; // 注意public
    //设置允许写入字段
    protected $filltable = ['id','name','age','email'];
  }

  控制器引用模型
  use App\Home\Member;

  模型的使用：
    方法一：像使用DB那样调用静态方法
    Member::get()   ...
    方法二：实例化模型再用
    $model = new Member();
    $model -> get();

  AR模式：
  必须实例化模型

  1.添加数据 
  方法一：
    //实例化模型
    public function test8()
    {
        //实例化模型
        $model = new Member();
        //属性赋值
        $model -> name = 'kitty';
        $model -> age = '25';
        $model -> email = 'kitty@qq.com';
        //记录
        $model -> save();
    }
    手动添加赋值

    方法二：
    Request方法
    public function test8(Request $request) //传入request
    {
        //实例化模型
        $model = new Member();
        //request
        $model -> created($request -> all());
    }
    通过request方法获取表单(自己创建.blade.php)数据,再调用模型写入数据

    2.查询操作
    //主键为5
    $data = Member::find(5); //返回的是对象
    $data = Member::find(5) -> toArray(); //返回的是数组

    $data = Member::where('id','>','3') -> get() -> toArray();
    与前面的差不多

    3.修改数据
    方法一：AR模式 （查资料）比较麻烦不建议用

    方法二：模型调用update方法
      $model = new Member();
      $model -> where('id','7') -> update(['age' => '26']);

    4.删除
    方法一：AR模式 （查资料）比较麻烦不建议用
       
    方法二：模型调用delete方法
      $model = new Member();
      $model ->  where().. -> delete();;

自动验证：(https://learnku.com/docs/laravel/5.5/validation/1302)
    Input::method(); 获取请求类型 (返回GET/POST)
    请求字段(https://learnku.com/docs/laravel/5.5/validation/1302#rule-accepted)
    (看案例)

    语言：
    装 ：composer require caouecs/laravel-lang:~3.0
    将所需的复制在resources\lang
    修改配置 app.php中locale



