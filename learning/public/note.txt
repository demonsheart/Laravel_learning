laravel特点
1. 单入口
2. 分层思想
3. ORM操作数据库
PS: 所有URL访问都必须事先定好路由规则

app目录: 存放项目
bootstarp目录: 启动
config目录: 配置
database目录： migration（创建数据表的类文件） seed(数据填充文件)
pubic目录：项目入口文件 静态资源文件 （项目单一入口文件，虚拟主机根目录）
resources：视图文件 语言包文件
routes目录：定义路由目录 web.php是定义路由的文件
storage目录：缓存文件、日志文件、后期用户上传文件
vendor目录： 第三方类库

.env文件 环境配置文件 （config配置一般都是读取.env文件）
artisan文件 代码生成文件

php artisan serve 启动与Apache无关（不推荐）
推荐使用虚拟主机

路由：(/routes)
  Route::请求方式('URL', 匿名函数/控制响应的方法);
       get/post/any

  Route::match([   ], 'URL', 匿名函数/控制响应的方法);
             请求方法数组

  路由参数的传递通过路由地址中的“{参数名}”传递（必选参数）
        {参数名?} 可选参数

  Route::any('/test4', function () {
    echo '<p>Test4-' . $_GET['id'] . '</p>';
  })->name('名字');//路由别名
  调用路由：route('名字');

  路由群组：
  Route::group(公共属性数组, 回调函数);

控制器：(/app/Http/Controllers) 实际上是类
    命名规则： nameController.php
    命令： php artisan make:controller 控制器名Controller 关键词
        ex:php artisan make:controller TestController
    命名空间三元素：常量 方法 类 （同一级目录不用引入）

    控制器路由：
    Route::get('/home/test/test1','TestController@test1');
                  URL                   控制器@方法
    
    分目录管理：
    php artisan make:controller Admin/IndexController
                                加上目录即可
    
接收用户输入：
    类接收： Illuminate\Support\Facades\Input (可在config/app.php中 在aliases数组配置别名)
    Input::get('参数名','参数没被传递时使用的默认值')
    Input::all()  获取所有用户输入
    Input::get('') 获取单个用户输入
    Input::only([])  获取指定用户输入
    Input::except([])  获取除指定用户输入外的所有用户输入
    Input::has('name') 判断输入参数是否存在

    Request也可接收输入

输出： dd(Array) //dump + die 后面代码不会执行

DB:
  use Illuminate\Support\Facades\DB;

  $db = DB::table('表名'); //连接表
  插入：
        $db->insert(一维/二维数组);
  更新：
  $db->where('id', '=', '3')->update([ '列名' => '值']);
  $db->increment('列名',5);  //每次+5
  $db->decrement('列名',5);  //每次-5

  查询：
  $db -> where() -> where() -> where()...  and关系

  $db -> where() -> orwhere() -> orwhere()...  or关系

  $db -> where()... ->get(); //取出所有

  $db -> where()... ->first(); //取出第一条

  $db -> where() ->value('列名'); //取出一个字段

  $db -> select('列名','列名') -> get(); //取出多个字段

  $db -> orderby('列名','asc/desc') -> get(); //排序

  $db -> limit(3) -> offset(2) -> get(); //分页
        输出条数    初始输出位置

  删除：
  $db -> where().. -> delete(); //返回影响行数

  使用SQL语句：
  影响记录的语句(insert update delete)
  DB::statement("SQL语句");

  不影响记录语句：
  DB::select("SQL语句");

  